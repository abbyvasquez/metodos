from math import sin,cos,tan,asin,acos,atan,sqrt,log,exp,acos
from math import sinh,cosh,tanh,asinh,acosh,atanh
import sympy
import math
from sympy import *
from matplotlib import pyplot
from math import e
from decimal import Decimal
from fractions import Fraction
import numpy as np
from array import array
import numpy as np
import sympy as sym
import matplotlib.pyplot as plt

x = sympy.symbols('x')
sympy.init_printing(use_unicode=True)

print('Metodo de Polinomio Interpolacion Lagrange\n')
Valor=([0,1],[0.2,0.9615],[0.4,0.8621],[0.6,0.7353],[0.8,0.6098],[1,0.5000],[1.2,0.4098],[1.4,0.3378],[1.6,0.2809],[1.8,0.2358],[2,0.2000],[2.2,0.1712],[2.4,0.1479],[2.6,0.1289],[2.8,0.1131],[3,0.1000],[3.2,0.0890],[3.4,0.0796],[3.6,0.0716],[3.8,0.0648],[4,0.0588],[4.2,0.0536],[4.4,0.0491],[4.6,0.0451],[4.8,0.0416],[5,0.0385])
#L0x=((x-Valor[1][0])*(x-Valor[2][0])*(x-Valor[3][0]))/((Valor[0][0]-Valor[1][0])*(Valor[0][0]-Valor[2][0])*(Valor[0][0]-Valor[3][0]))

j=0
resultadoTotalizando=0
while (j<=25):
 resultado=0
 valorandonumerador=1
 valorandodenominador=1
 i=0
 while (i<=25):
            if (i!=j):
                     valorandonumerador=valorandonumerador*(x-Valor[i][0])
                     valorandodenominador=valorandodenominador*(Valor[j][0]-Valor[i][0])
            i=i+1
 resultado=valorandonumerador/valorandodenominador
 resultadoTot=(Valor[j][1])*resultado
 print ('L(',j,')=',resultado)
 resultadoTotalizando = resultadoTotalizando + resultadoTot
 j=j+1
 print ('F(',j-1,')=',resultadoTotalizando)

def f(x):
     return eval(resultadoTotalizando)

#x=float(input('Ingrese el valor que desea reemplazar en la funciÃ³n: '))

resultadoTotalizando=str(resultadoTotalizando)
resultadoTotalizandoEvaluando = f(x)

print ('F(',j-1,')=',resultadoTotalizandoEvaluando)

Fx= 4.61842320742881e-7*x*(x - 5)*(x - 4.8)*(x - 4.6)*(x - 4.4)*(x - 4.2)*(x - 4)*(x - 3.8)*(x - 3.6)*(x - 3.4)*(x - 3.2)*(x - 3)*(x - 2.8)*(x - 2.6)*(x - 2.4)*(x - 2.2)*(x - 2)*(x - 1.8)*(x - 1.6)*(x - 1.4)*(x - 1.2)*(x - 1)*(x - 0.8)*(x - 0.6)*(x - 0.4) - 4.96916399017083e-6*x*(x - 5)*(x - 4.8)*(x - 4.6)*(x - 4.4)*(x - 4.2)*(x - 4)*(x - 3.8)*(x - 3.6)*(x - 3.4)*(x - 3.2)*(x - 3)*(x - 2.8)*(x - 2.6)*(x - 2.4)*(x - 2.2)*(x - 2)*(x - 1.8)*(x - 1.6)*(x - 1.4)*(x - 1.2)*(x - 1)*(x - 0.8)*(x - 0.6)*(x - 0.2) + 3.24935253007656e-5*x*(x - 5)*(x - 4.8)*(x - 4.6)*(x - 4.4)*(x - 4.2)*(x - 4)*(x - 3.8)*(x - 3.6)*(x - 3.4)*(x - 3.2)*(x - 3)*(x - 2.8)*(x - 2.6)*(x - 2.4)*(x - 2.2)*(x - 2)*(x - 1.8)*(x - 1.6)*(x - 1.4)*(x - 1.2)*(x - 1)*(x - 0.8)*(x - 0.4)*(x - 0.2) - 0.000148211661235193*x*(x - 5)*(x - 4.8)*(x - 4.6)*(x - 4.4)*(x - 4.2)*(x - 4)*(x - 3.8)*(x - 3.6)*(x - 3.4)*(x - 3.2)*(x - 3)*(x - 2.8)*(x - 2.6)*(x - 2.4)*(x - 2.2)*(x - 2)*(x - 1.8)*(x - 1.6)*(x - 1.4)*(x - 1.2)*(x - 1)*(x - 0.6)*(x - 0.4)*(x - 0.2) + 0.000510404212190728*x*(x - 5)*(x - 4.8)*(x - 4.6)*(x - 4.4)*(x - 4.2)*(x - 4)*(x - 3.8)*(x - 3.6)*(x - 3.4)*(x - 3.2)*(x - 3)*(x - 2.8)*(x - 2.6)*(x - 2.4)*(x - 2.2)*(x - 2)*(x - 1.8)*(x - 1.6)*(x - 1.4)*(x - 1.2)*(x - 0.8)*(x - 0.6)*(x - 0.4)*(x - 0.2) - 0.00139442430770507*x*(x - 5)*(x - 4.8)*(x - 4.6)*(x - 4.4)*(x - 4.2)*(x - 4)*(x - 3.8)*(x - 3.6)*(x - 3.4)*(x - 3.2)*(x - 3)*(x - 2.8)*(x - 2.6)*(x - 2.4)*(x - 2.2)*(x - 2)*(x - 1.8)*(x - 1.6)*(x - 1.4)*(x - 1)*(x - 0.8)*(x - 0.6)*(x - 0.4)*(x - 0.2) + 0.00311988220445955*x*(x - 5)*(x - 4.8)*(x - 4.6)*(x - 4.4)*(x - 4.2)*(x - 4)*(x - 3.8)*(x - 3.6)*(x - 3.4)*(x - 3.2)*(x - 3)*(x - 2.8)*(x - 2.6)*(x - 2.4)*(x - 2.2)*(x - 2)*(x - 1.8)*(x - 1.6)*(x - 1.2)*(x - 1)*(x - 0.8)*(x - 0.6)*(x - 0.4)*(x - 0.2) - 0.00583731068760671*x*(x - 5)*(x - 4.8)*(x - 4.6)*(x - 4.4)*(x - 4.2)*(x - 4)*(x - 3.8)*(x - 3.6)*(x - 3.4)*(x - 3.2)*(x - 3)*(x - 2.8)*(x - 2.6)*(x - 2.4)*(x - 2.2)*(x - 2)*(x - 1.8)*(x - 1.4)*(x - 1.2)*(x - 1)*(x - 0.8)*(x - 0.6)*(x - 0.4)*(x - 0.2) + 0.00925574289875411*x*(x - 5)*(x - 4.8)*(x - 4.6)*(x - 4.4)*(x - 4.2)*(x - 4)*(x - 3.8)*(x - 3.6)*(x - 3.4)*(x - 3.2)*(x - 3)*(x - 2.8)*(x - 2.6)*(x - 2.4)*(x - 2.2)*(x - 2)*(x - 1.6)*(x - 1.4)*(x - 1.2)*(x - 1)*(x - 0.8)*(x - 0.6)*(x - 0.4)*(x - 0.2) - 0.012560804612389*x*(x - 5)*(x - 4.8)*(x - 4.6)*(x - 4.4)*(x - 4.2)*(x - 4)*(x - 3.8)*(x - 3.6)*(x - 3.4)*(x - 3.2)*(x - 3)*(x - 2.8)*(x - 2.6)*(x - 2.4)*(x - 2.2)*(x - 1.8)*(x - 1.6)*(x - 1.4)*(x - 1.2)*(x - 1)*(x - 0.8)*(x - 0.6)*(x - 0.4)*(x - 0.2) + 0.0146618846566431*x*(x - 5)*(x - 4.8)*(x - 4.6)*(x - 4.4)*(x - 4.2)*(x - 4)*(x - 3.8)*(x - 3.6)*(x - 3.4)*(x - 3.2)*(x - 3)*(x - 2.8)*(x - 2.6)*(x - 2.4)*(x - 2)*(x - 1.8)*(x - 1.6)*(x - 1.4)*(x - 1.2)*(x - 1)*(x - 0.8)*(x - 0.6)*(x - 0.4)*(x - 0.2) - 0.0147775011536435*x*(x - 5)*(x - 4.8)*(x - 4.6)*(x - 4.4)*(x - 4.2)*(x - 4)*(x - 3.8)*(x - 3.6)*(x - 3.4)*(x - 3.2)*(x - 3)*(x - 2.8)*(x - 2.6)*(x - 2.2)*(x - 2)*(x - 1.8)*(x - 1.6)*(x - 1.4)*(x - 1.2)*(x - 1)*(x - 0.8)*(x - 0.6)*(x - 0.4)*(x - 0.2) + 0.0128791068201802*x*(x - 5)*(x - 4.8)*(x - 4.6)*(x - 4.4)*(x - 4.2)*(x - 4)*(x - 3.8)*(x - 3.6)*(x - 3.4)*(x - 3.2)*(x - 3)*(x - 2.8)*(x - 2.4)*(x - 2.2)*(x - 2)*(x - 1.8)*(x - 1.6)*(x - 1.4)*(x - 1.2)*(x - 1)*(x - 0.8)*(x - 0.6)*(x - 0.4)*(x - 0.2) - 0.00968609319314449*x*(x - 5)*(x - 4.8)*(x - 4.6)*(x - 4.4)*(x - 4.2)*(x - 4)*(x - 3.8)*(x - 3.6)*(x - 3.4)*(x - 3.2)*(x - 3)*(x - 2.6)*(x - 2.4)*(x - 2.2)*(x - 2)*(x - 1.8)*(x - 1.6)*(x - 1.4)*(x - 1.2)*(x - 1)*(x - 0.8)*(x - 0.6)*(x - 0.4)*(x - 0.2) + 0.00628040230619448*x*(x - 5)*(x - 4.8)*(x - 4.6)*(x - 4.4)*(x - 4.2)*(x - 4)*(x - 3.8)*(x - 3.6)*(x - 3.4)*(x - 3.2)*(x - 2.8)*(x - 2.6)*(x - 2.4)*(x - 2.2)*(x - 2)*(x - 1.8)*(x - 1.6)*(x - 1.4)*(x - 1.2)*(x - 1)*(x - 0.8)*(x - 0.6)*(x - 0.4)*(x - 0.2) - 0.00349347378282068*x*(x - 5)*(x - 4.8)*(x - 4.6)*(x - 4.4)*(x - 4.2)*(x - 4)*(x - 3.8)*(x - 3.6)*(x - 3.4)*(x - 3)*(x - 2.8)*(x - 2.6)*(x - 2.4)*(x - 2.2)*(x - 2)*(x - 1.8)*(x - 1.6)*(x - 1.4)*(x - 1.2)*(x - 1)*(x - 0.8)*(x - 0.6)*(x - 0.4)*(x - 0.2) + 0.0016541471368227*x*(x - 5)*(x - 4.8)*(x - 4.6)*(x - 4.4)*(x - 4.2)*(x - 4)*(x - 3.8)*(x - 3.6)*(x - 3.2)*(x - 3)*(x - 2.8)*(x - 2.6)*(x - 2.4)*(x - 2.2)*(x - 2)*(x - 1.8)*(x - 1.6)*(x - 1.4)*(x - 1.2)*(x - 1)*(x - 0.8)*(x - 0.6)*(x - 0.4)*(x - 0.2) - 0.000661289419299301*x*(x - 5)*(x - 4.8)*(x - 4.6)*(x - 4.4)*(x - 4.2)*(x - 4)*(x - 3.8)*(x - 3.4)*(x - 3.2)*(x - 3)*(x - 2.8)*(x - 2.6)*(x - 2.4)*(x - 2.2)*(x - 2)*(x - 1.8)*(x - 1.6)*(x - 1.4)*(x - 1.2)*(x - 1)*(x - 0.8)*(x - 0.6)*(x - 0.4)*(x - 0.2) + 0.000220494619666395*x*(x - 5)*(x - 4.8)*(x - 4.6)*(x - 4.4)*(x - 4.2)*(x - 4)*(x - 3.6)*(x - 3.4)*(x - 3.2)*(x - 3)*(x - 2.8)*(x - 2.6)*(x - 2.4)*(x - 2.2)*(x - 2)*(x - 1.8)*(x - 1.6)*(x - 1.4)*(x - 1.2)*(x - 1)*(x - 0.8)*(x - 0.6)*(x - 0.4)*(x - 0.2) - 6.00235353536295e-5*x*(x - 5)*(x - 4.8)*(x - 4.6)*(x - 4.4)*(x - 4.2)*(x - 3.8)*(x - 3.6)*(x - 3.4)*(x - 3.2)*(x - 3)*(x - 2.8)*(x - 2.6)*(x - 2.4)*(x - 2.2)*(x - 2)*(x - 1.8)*(x - 1.6)*(x - 1.4)*(x - 1.2)*(x - 1)*(x - 0.8)*(x - 0.6)*(x - 0.4)*(x - 0.2) + 1.30274598921062e-5*x*(x - 5)*(x - 4.8)*(x - 4.6)*(x - 4.4)*(x - 4)*(x - 3.8)*(x - 3.6)*(x - 3.4)*(x - 3.2)*(x - 3)*(x - 2.8)*(x - 2.6)*(x - 2.4)*(x - 2.2)*(x - 2)*(x - 1.8)*(x - 1.6)*(x - 1.4)*(x - 1.2)*(x - 1)*(x - 0.8)*(x - 0.6)*(x - 0.4)*(x - 0.2) - 2.16977028732162e-6*x*(x - 5)*(x - 4.8)*(x - 4.6)*(x - 4.2)*(x - 4)*(x - 3.8)*(x - 3.6)*(x - 3.4)*(x - 3.2)*(x - 3)*(x - 2.8)*(x - 2.6)*(x - 2.4)*(x - 2.2)*(x - 2)*(x - 1.8)*(x - 1.6)*(x - 1.4)*(x - 1.2)*(x - 1)*(x - 0.8)*(x - 0.6)*(x - 0.4)*(x - 0.2) + 2.59957424842484e-7*x*(x - 5)*(x - 4.8)*(x - 4.4)*(x - 4.2)*(x - 4)*(x - 3.8)*(x - 3.6)*(x - 3.4)*(x - 3.2)*(x - 3)*(x - 2.8)*(x - 2.6)*(x - 2.4)*(x - 2.2)*(x - 2)*(x - 1.8)*(x - 1.6)*(x - 1.4)*(x - 1.2)*(x - 1)*(x - 0.8)*(x - 0.6)*(x - 0.4)*(x - 0.2) - 1.99819454424377e-8*x*(x - 5)*(x - 4.6)*(x - 4.4)*(x - 4.2)*(x - 4)*(x - 3.8)*(x - 3.6)*(x - 3.4)*(x - 3.2)*(x - 3)*(x - 2.8)*(x - 2.6)*(x - 2.4)*(x - 2.2)*(x - 2)*(x - 1.8)*(x - 1.6)*(x - 1.4)*(x - 1.2)*(x - 1)*(x - 0.8)*(x - 0.6)*(x - 0.4)*(x - 0.2) + 7.39716249551779e-10*x*(x - 4.8)*(x - 4.6)*(x - 4.4)*(x - 4.2)*(x - 4)*(x - 3.8)*(x - 3.6)*(x - 3.4)*(x - 3.2)*(x - 3)*(x - 2.8)*(x - 2.6)*(x - 2.4)*(x - 2.2)*(x - 2)*(x - 1.8)*(x - 1.6)*(x - 1.4)*(x - 1.2)*(x - 1)*(x - 0.8)*(x - 0.6)*(x - 0.4)*(x - 0.2) - 1.9213409079267e-8*(x - 5)*(x - 4.8)*(x - 4.6)*(x - 4.4)*(x - 4.2)*(x - 4)*(x - 3.8)*(x - 3.6)*(x - 3.4)*(x - 3.2)*(x - 3)*(x - 2.8)*(x - 2.6)*(x - 2.4)*(x - 2.2)*(x - 2)*(x - 1.8)*(x - 1.6)*(x - 1.4)*(x - 1.2)*(x - 1)*(x - 0.8)*(x - 0.6)*(x - 0.4)*(x - 0.2)
Fx=str(Fx)
print ("fx",Fx)
x0=2.6

#h=float(input('Ingrese el valor de H: '))
h=0.2
def f(x):
    return eval(Fx)

f1x0pro=(-3*f(x0)+4*f(x0+h)-f(x0+(2*h)))/(2*h)
print ("f1x0pro",f1x0pro)
f1x0cen=(f(x0-2*h)-8*f(x0-h)+8*f(x0+h)-f(x0+2*h))/(12*h)
print ("f1x0cen",f1x0cen)
f1x0reg=(f(x0-2*h)-4*f(x0-h)+3*f(x0))/(2*h)
print ("f1x0reg",f1x0reg)
f2x0pro=(2*f(x0)-5*f(x0+h)+4*f(x0+2*h)-f(x0+3*h))/(h**2)
print ("f2x0pro",f2x0pro)
f2x0cen=-f(x0-2*h)+16*f(x0-h)-30*f(x0)+16*f(x0+h)-f(x0+2*h)
print ("f2x0cen",f2x0cen)
f2x0reg=(-f(x0-3*h)+4*f(x0-2*h)-5*f(x0-h)+2*f(x0))/(h**2)
print ("f2x0reg",f2x0reg)
f3x0pro=(-5*f(x0)+18*f(x0+h)-24*f(x0+2*h)+14*f(x0+3*h)-3*f(x0+4*h))/(2*(h**3))
print ("f3x0pro",f3x0pro)
f3x0cen=(f(x0-3*h)-8*f(x0-2*h)+13*f(x0-h)-13*f(x0+h)+8*f(x0+2*h)-f(x0+3*h))/(8*(h**3))
print ("f3x0cen",f3x0cen)
f3x0reg=(3*f(x0-4*h)-14*f(x0-3*h)+24*f(x0-2*h)-18*f(x0-h)+5*f(x0))/(2*(h**3))
print ("f3x0reg",f3x0reg)